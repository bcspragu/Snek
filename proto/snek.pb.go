// Code generated by protoc-gen-go.
// source: snek.proto
// DO NOT EDIT!

/*
Package snek is a generated protocol buffer package.

It is generated from these files:
	snek.proto

It has these top-level messages:
	Loc
	UpdateRequest
	UpdateResponse
*/
package snek

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Loc struct {
	X int32 `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Y int32 `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
}

func (m *Loc) Reset()                    { *m = Loc{} }
func (m *Loc) String() string            { return proto.CompactTextString(m) }
func (*Loc) ProtoMessage()               {}
func (*Loc) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Loc) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Loc) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

type UpdateRequest struct {
	NewHead *Loc `protobuf:"bytes,1,opt,name=new_head,json=newHead" json:"new_head,omitempty"`
	OldTail *Loc `protobuf:"bytes,2,opt,name=old_tail,json=oldTail" json:"old_tail,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UpdateRequest) GetNewHead() *Loc {
	if m != nil {
		return m.NewHead
	}
	return nil
}

func (m *UpdateRequest) GetOldTail() *Loc {
	if m != nil {
		return m.OldTail
	}
	return nil
}

type UpdateResponse struct {
	Id      int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	NewHead *Loc  `protobuf:"bytes,2,opt,name=new_head,json=newHead" json:"new_head,omitempty"`
	OldTail *Loc  `protobuf:"bytes,3,opt,name=old_tail,json=oldTail" json:"old_tail,omitempty"`
}

func (m *UpdateResponse) Reset()                    { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()               {}
func (*UpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UpdateResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateResponse) GetNewHead() *Loc {
	if m != nil {
		return m.NewHead
	}
	return nil
}

func (m *UpdateResponse) GetOldTail() *Loc {
	if m != nil {
		return m.OldTail
	}
	return nil
}

func init() {
	proto.RegisterType((*Loc)(nil), "snek.Loc")
	proto.RegisterType((*UpdateRequest)(nil), "snek.UpdateRequest")
	proto.RegisterType((*UpdateResponse)(nil), "snek.UpdateResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Snek service

type SnekClient interface {
	Update(ctx context.Context, opts ...grpc.CallOption) (Snek_UpdateClient, error)
}

type snekClient struct {
	cc *grpc.ClientConn
}

func NewSnekClient(cc *grpc.ClientConn) SnekClient {
	return &snekClient{cc}
}

func (c *snekClient) Update(ctx context.Context, opts ...grpc.CallOption) (Snek_UpdateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Snek_serviceDesc.Streams[0], c.cc, "/snek.Snek/Update", opts...)
	if err != nil {
		return nil, err
	}
	x := &snekUpdateClient{stream}
	return x, nil
}

type Snek_UpdateClient interface {
	Send(*UpdateRequest) error
	Recv() (*UpdateResponse, error)
	grpc.ClientStream
}

type snekUpdateClient struct {
	grpc.ClientStream
}

func (x *snekUpdateClient) Send(m *UpdateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *snekUpdateClient) Recv() (*UpdateResponse, error) {
	m := new(UpdateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Snek service

type SnekServer interface {
	Update(Snek_UpdateServer) error
}

func RegisterSnekServer(s *grpc.Server, srv SnekServer) {
	s.RegisterService(&_Snek_serviceDesc, srv)
}

func _Snek_Update_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SnekServer).Update(&snekUpdateServer{stream})
}

type Snek_UpdateServer interface {
	Send(*UpdateResponse) error
	Recv() (*UpdateRequest, error)
	grpc.ServerStream
}

type snekUpdateServer struct {
	grpc.ServerStream
}

func (x *snekUpdateServer) Send(m *UpdateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *snekUpdateServer) Recv() (*UpdateRequest, error) {
	m := new(UpdateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Snek_serviceDesc = grpc.ServiceDesc{
	ServiceName: "snek.Snek",
	HandlerType: (*SnekServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Update",
			Handler:       _Snek_Update_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "snek.proto",
}

func init() { proto.RegisterFile("snek.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 209 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0xce, 0x4b, 0xcd,
	0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0x14, 0xb9, 0x98, 0x7d, 0xf2,
	0x93, 0x85, 0x78, 0xb8, 0x18, 0x2b, 0x24, 0x18, 0x15, 0x18, 0x35, 0x58, 0x83, 0x18, 0x2b, 0x40,
	0xbc, 0x4a, 0x09, 0x26, 0x08, 0xaf, 0x52, 0x29, 0x9a, 0x8b, 0x37, 0xb4, 0x20, 0x25, 0xb1, 0x24,
	0x35, 0x28, 0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0x44, 0x48, 0x85, 0x8b, 0x23, 0x2f, 0xb5, 0x3c, 0x3e,
	0x23, 0x35, 0x31, 0x05, 0xac, 0x87, 0xdb, 0x88, 0x53, 0x0f, 0x6c, 0xb0, 0x4f, 0x7e, 0x72, 0x10,
	0x7b, 0x5e, 0x6a, 0xb9, 0x47, 0x6a, 0x62, 0x0a, 0x48, 0x55, 0x7e, 0x4e, 0x4a, 0x7c, 0x49, 0x62,
	0x66, 0x0e, 0xd8, 0x2c, 0x54, 0x55, 0xf9, 0x39, 0x29, 0x21, 0x89, 0x99, 0x39, 0x4a, 0x39, 0x5c,
	0x7c, 0x30, 0xc3, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0xf8, 0xb8, 0x98, 0x32, 0x53, 0xa0,
	0x6e, 0x61, 0xca, 0x4c, 0x41, 0xb1, 0x8d, 0x89, 0x28, 0xdb, 0x98, 0x71, 0xd9, 0x66, 0xe4, 0xc8,
	0xc5, 0x12, 0x9c, 0x97, 0x9a, 0x2d, 0x64, 0xc9, 0xc5, 0x06, 0xb1, 0x55, 0x48, 0x18, 0xa2, 0x0a,
	0xc5, 0x83, 0x52, 0x22, 0xa8, 0x82, 0x10, 0x87, 0x29, 0x31, 0x68, 0x30, 0x1a, 0x30, 0x26, 0xb1,
	0x81, 0x43, 0xcf, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x55, 0xae, 0x35, 0x94, 0x4b, 0x01, 0x00,
	0x00,
}
